name: Build and Release

on:
  push:
    branches: [ main, dev ]  # 添加dev分支支持
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings detected but not blocking build"
      
    - name: Run Prettier check
      run: npm run format:check || echo "Prettier formatting issues detected but not blocking build"

  # 构建应用
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    strategy:
      matrix:
        include:
          # macOS
          - platform: 'macos-intel'
            os: 'macos-latest'
            arch: 'x64'
            build_command: 'npm run build-mac:x64'
            
          - platform: 'macos-apple-silicon'  
            os: 'macos-latest'
            arch: 'arm64'
            build_command: 'npm run build-mac:arm64'
            
          # Windows
          - platform: 'windows'
            os: 'windows-2022'
            arch: 'x64'
            build_command: 'npm run build-win'
            
          # Linux
          - platform: 'linux-x64'
            os: 'ubuntu-latest'
            arch: 'x64'
            build_command: 'npm run build-linux:x64'
            
          - platform: 'linux-arm64'
            os: 'ubuntu-latest'
            arch: 'arm64'
            build_command: 'npm run build-linux:arm64'
            
          - platform: 'linux-armv7l'
            os: 'ubuntu-latest'
            arch: 'armv7l'
            build_command: 'npm run build-linux:armv7l'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        npm_config_target_arch: ${{ matrix.arch }}
        npm_config_disturl: https://electronjs.org/headers
        npm_config_runtime: electron
        npm_config_cache: ~/.electron-gyp
        # Set architecture explicitly for macOS
        TARGET_ARCH: ${{ matrix.arch }}
        ARCHS: ${{ matrix.arch }}
        # Skip optional dependencies that might cause architecture issues
        npm_config_optional: false
      
    - name: Setup Python (for native dependencies)
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup Windows build environment
      if: matrix.platform == 'windows'
      run: |
        echo "Using pre-installed Windows build tools"
        
    - name: Install macOS-specific dependencies
      if: startsWith(matrix.platform, 'macos')
      run: |
        # Clear any cached native modules that might have wrong architecture
        rm -rf node_modules/fs-xattr/build || true
        rm -rf ~/.electron-gyp || true
        
        # Install appdmg with forced rebuild
        npm install appdmg@^0.6.6 --build-from-source
        
        # Specifically rebuild fs-xattr for correct architecture
        cd node_modules/fs-xattr && npm run rebuild || npm rebuild || echo "fs-xattr rebuild completed"
        cd ../..
        
        # Verify the architecture
        file node_modules/fs-xattr/build/Release/xattr.node || echo "xattr.node not found, will be built during make"
        
    - name: Install system dependencies (Linux)
      if: startsWith(matrix.platform, 'linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev
        
    - name: Build application
      run: ${{ matrix.build_command }}
      env:
        # Architecture for package naming
        arch: ${{ matrix.arch }}
        # macOS 签名配置 (需要在 GitHub Secrets 中设置，匹配 forge.config.ts)
        appleId: ${{ secrets.APPLE_ID }}
        appleIdPassword: ${{ secrets.APPLE_ID_PASSWORD }}  
        teamId: ${{ secrets.TEAM_ID }}
        identity: ${{ secrets.IDENTITY }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: |
          out/make/**/*
        retention-days: 5

  # 生成源码压缩包
  source-archive:
    name: Create Source Archives
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create source archives
      run: |
        # Create temporary directory for clean source
        mkdir -p source-temp
        
        # Copy source files excluding unnecessary directories
        rsync -av \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='out' \
          --exclude='.webpack' \
          --exclude='dist' \
          --exclude='.nyc_output' \
          --exclude='coverage' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          ./ source-temp/AionUi-${{ steps.version.outputs.version }}/
        
        cd source-temp
        
        # Create ZIP archive
        zip -r ../AionUi-${{ steps.version.outputs.version }}-source.zip AionUi-${{ steps.version.outputs.version }}/
        
        # Create tar.gz archive
        tar -czf ../AionUi-${{ steps.version.outputs.version }}-source.tar.gz AionUi-${{ steps.version.outputs.version }}/
        
        cd ..
        ls -la *.zip *.tar.gz
        
    - name: Upload source archives
      uses: actions/upload-artifact@v4
      with:
        name: source-archives
        path: |
          AionUi-*.zip
          AionUi-*.tar.gz
        retention-days: 30

  # 发布到 GitHub Releases
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, source-archive]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: build-artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: build-artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 自动更新版本 (可选)
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bump version
      id: version
      run: |
        # 获取当前版本
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # 检查是否需要版本升级 (基于提交信息)
        if git log --format=%B -1 | grep -E "^(feat|fix|BREAKING CHANGE)" > /dev/null; then
          if git log --format=%B -1 | grep "BREAKING CHANGE" > /dev/null; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif git log --format=%B -1 | grep "^feat" > /dev/null; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit version bump
      if: steps.version.outputs.should_release == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
        git tag ${{ steps.version.outputs.new_version }}
        git push origin main --tags
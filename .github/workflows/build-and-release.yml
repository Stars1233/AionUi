name: Build and Release

on:
  push:
    branches: [ main, dev, fix-linux-packaging ]  # 添加 Linux 打包修复分支
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run ESLint
      run: npm run lint || echo "ESLint warnings detected but not blocking build"
      
    - name: Run Prettier check
      run: npm run format:check || echo "Prettier formatting issues detected but not blocking build"

  # macOS Intel 构建 (独立job避免架构冲突)
  build-macos-intel:
    name: Build macOS Intel
    runs-on: macos-latest  
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Build for Intel (x64) under Rosetta 2
      run: |
        # 强制在 x86_64 架构下运行避免原生模块冲突
        arch -x86_64 zsh << 'EOF'
        set -e
        echo "Running under $(uname -m) architecture..."
        npm ci
        npx electron-forge make --platform=darwin --arch=x64
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: macos-intel-build
        path: |
          out/make/**/*
        retention-days: 5

  # macOS Apple Silicon 构建 (独立job)
  build-macos-arm:
    name: Build macOS Apple Silicon  
    runs-on: macos-latest
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Build for Apple Silicon (arm64) Natively
      run: |
        set -e
        echo "Running under $(uname -m) architecture..."
        npm ci
        npx electron-forge make --platform=darwin --arch=arm64
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: macos-apple-silicon-build
        path: |
          out/make/**/*
        retention-days: 5

  # Windows x64 构建 (独立job)
  build-windows-x64:
    name: Build Windows x64
    runs-on: windows-2022
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        npm_config_target_arch: x64
        npm_config_disturl: https://electronjs.org/headers
        npm_config_runtime: electron
        npm_config_cache: ~/.electron-gyp
        TARGET_ARCH: x64
        ARCHS: x64
        
    - name: Build Windows x64
      run: npm run build-win
      env:
        arch: x64
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: windows-x64-build
        path: |
          out/make/**/*
        retention-days: 5

  # Windows arm64 构建 (独立job)  
  build-windows-arm64:
    name: Build Windows arm64
    runs-on: windows-2022
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      env:
        npm_config_target_arch: arm64
        npm_config_disturl: https://electronjs.org/headers
        npm_config_runtime: electron
        npm_config_cache: ~/.electron-gyp
        TARGET_ARCH: arm64
        ARCHS: arm64
        
    - name: Build Windows arm64
      run: npx electron-forge make --platform=win32 --arch=arm64
      env:
        arch: arm64
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: windows-arm64-build
        path: |
          out/make/**/*
        retention-days: 5

  # Linux x64 构建 (独立job)
  build-linux-x64:
    name: Build Linux x64
    runs-on: ubuntu-latest
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      env:
        npm_config_target_arch: x64
        npm_config_disturl: https://electronjs.org/headers
        npm_config_runtime: electron
        npm_config_cache: ~/.electron-gyp
        TARGET_ARCH: x64
        ARCHS: x64
      
    - name: Setup Python (for native dependencies)
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fakeroot dpkg-dev rpm
        
    - name: Build Linux x64
      run: npm run build-linux:x64
      continue-on-error: true
      env:
        arch: x64
        ELECTRON_FORGE_DOCKER: false
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: linux-x64-build
        path: |
          out/make/**/*
          out/AionUi-*/**/*
        retention-days: 5

  # Linux arm64 构建 (独立job)
  build-linux-arm64:
    name: Build Linux arm64
    runs-on: ubuntu-latest
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for ARM cross-compilation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm,arm64
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Build application in ARM Docker Container
      run: |
        DOCKER_IMAGE="arm64v8/node:20"
        echo "Building for arm64 using $DOCKER_IMAGE"
        
        docker run --rm \
          -v "$GITHUB_WORKSPACE":/workspace \
          -w /workspace \
          --platform linux/arm64 \
          $DOCKER_IMAGE \
          /bin/bash -c "
            set -e
            echo '=== Container Environment Check ==='
            uname -m
            node -p 'process.arch'
            echo '=== Installing Required Packaging Tools ==='
            apt-get update
            apt-get install -y --reinstall --no-install-recommends dpkg-dev fakeroot rpm build-essential
            
            # --- 终极修复：用一个直通脚本替换 fakeroot ---
            echo '=== Final Fix: Disabling fakeroot by replacing it with a pass-through script ==='
            # 创建一个脚本来覆盖原始的 fakeroot，因为我们已经是 root 用户，不需要它
            echo '#!/bin/sh\nexec \"\$@\"' > /usr/local/bin/fakeroot
            chmod +x /usr/local/bin/fakeroot
            echo 'fakeroot has been replaced. Verifying...'
            # 验证新的 fakeroot 在 PATH 路径的最前面
            which fakeroot 
            echo '================================================================================='
            
            echo '=== Installing Node Dependencies ==='
            npm install --omit=optional
            
            echo '=== Building Application ==='
            npx electron-forge make --platform=linux --arch=arm64 --verbose
          "
      continue-on-error: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: linux-arm64-build
        path: |
          out/make/**/*
          out/AionUi-*/**/*
        retention-days: 5

  # Linux armv7l 构建 (独立job)
  build-linux-armv7l:
    name: Build Linux armv7l
    runs-on: ubuntu-latest
    needs: code-quality
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU for ARM cross-compilation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm,arm64
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Build application in ARM Docker Container
      run: |
        DOCKER_IMAGE="arm32v7/node:20"
        echo "Building for armv7l using $DOCKER_IMAGE"
        
        docker run --rm \
          -v "$GITHUB_WORKSPACE":/workspace \
          -w /workspace \
          --platform linux/arm/v7 \
          $DOCKER_IMAGE \
          /bin/bash -c "
            set -e
            echo '=== Container Environment Check ==='
            uname -m
            node -p 'process.arch'
            echo '=== Installing Required Packaging Tools ==='
            apt-get update
            apt-get install -y --reinstall --no-install-recommends dpkg-dev fakeroot rpm build-essential
            
            # --- 终极修复：用一个直通脚本替换 fakeroot ---
            echo '=== Final Fix: Disabling fakeroot by replacing it with a pass-through script ==='
            # 创建一个脚本来覆盖原始的 fakeroot，因为我们已经是 root 用户，不需要它
            echo '#!/bin/sh\nexec \"\$@\"' > /usr/local/bin/fakeroot
            chmod +x /usr/local/bin/fakeroot
            echo 'fakeroot has been replaced. Verifying...'
            # 验证新的 fakeroot 在 PATH 路径的最前面
            which fakeroot 
            echo '================================================================================='
            
            echo '=== Installing Node Dependencies ==='
            npm install --omit=optional
            
            echo '=== Building Application ==='
            npx electron-forge make --platform=linux --arch=armv7l --verbose
          "
      continue-on-error: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: linux-armv7l-build
        path: |
          out/make/**/*
          out/AionUi-*/**/*
        retention-days: 5


  # 生成源码压缩包
  source-archive:
    name: Create Source Archives
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix-linux-packaging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create source archives
      run: |
        # Create temporary directory for clean source
        mkdir -p source-temp
        
        # Copy source files excluding unnecessary directories
        rsync -av \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='out' \
          --exclude='.webpack' \
          --exclude='dist' \
          --exclude='.nyc_output' \
          --exclude='coverage' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          ./ source-temp/AionUi-${{ steps.version.outputs.version }}/
        
        cd source-temp
        
        # Create ZIP archive
        zip -r ../AionUi-${{ steps.version.outputs.version }}-source.zip AionUi-${{ steps.version.outputs.version }}/
        
        # Create tar.gz archive
        tar -czf ../AionUi-${{ steps.version.outputs.version }}-source.tar.gz AionUi-${{ steps.version.outputs.version }}/
        
        cd ..
        ls -la *.zip *.tar.gz
        
    - name: Upload ZIP source archive
      uses: actions/upload-artifact@v4
      with:
        name: source-zip
        path: AionUi-*.zip
        retention-days: 30
        
    - name: Upload TAR.GZ source archive
      uses: actions/upload-artifact@v4
      with:
        name: source-tarball
        path: AionUi-*.tar.gz
        retention-days: 30

  # 发布到 GitHub Releases
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-macos-intel, build-macos-arm, build-windows-x64, build-windows-arm64, build-linux-x64, build-linux-arm64, build-linux-armv7l, source-archive]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: build-artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: build-artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 自动更新版本 (可选)
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bump version
      id: version
      run: |
        # 获取当前版本
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # 检查是否需要版本升级 (基于提交信息)
        if git log --format=%B -1 | grep -E "^(feat|fix|BREAKING CHANGE)" > /dev/null; then
          if git log --format=%B -1 | grep "BREAKING CHANGE" > /dev/null; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif git log --format=%B -1 | grep "^feat" > /dev/null; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit version bump
      if: steps.version.outputs.should_release == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
        git tag ${{ steps.version.outputs.new_version }}
        git push origin main --tags
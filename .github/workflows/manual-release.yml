name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor 
        - major
        - prerelease
      release_notes:
        description: 'Release notes'
        required: false
        type: string
      platforms:
        description: 'Platforms to build'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - macos-only
        - windows-only
        - linux-only

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Bump version
      id: version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ "${{ inputs.version_type }}" = "prerelease" ]; then
          NEW_VERSION=$(npm version prerelease --preid=beta --no-git-tag-version)
        else
          NEW_VERSION=$(npm version ${{ inputs.version_type }} --no-git-tag-version)
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        git add package.json package-lock.json
        git commit -m "chore: release $NEW_VERSION"
        git tag $NEW_VERSION
        git push origin main --tags

  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    
    strategy:
      matrix:
        include:
          - platform: 'macos-intel'
            os: 'macos-latest'
            arch: 'x64'
            build_command: 'npm run build-mac:x64'
            condition: ${{ inputs.platforms == 'all' || inputs.platforms == 'macos-only' }}
            
          - platform: 'macos-apple-silicon'
            os: 'macos-latest'
            arch: 'arm64'
            build_command: 'npm run build-mac:arm64'
            condition: ${{ inputs.platforms == 'all' || inputs.platforms == 'macos-only' }}
            
          - platform: 'windows'
            os: 'windows-latest'
            arch: 'x64'
            build_command: 'npm run build-win'
            condition: ${{ inputs.platforms == 'all' || inputs.platforms == 'windows-only' }}
            
          - platform: 'linux'
            os: 'ubuntu-latest'
            arch: 'x64'
            build_command: 'npm run build-deb'
            condition: ${{ inputs.platforms == 'all' || inputs.platforms == 'linux-only' }}
            
    if: ${{ matrix.condition }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.new_version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev
        
    - name: Build application
      run: ${{ matrix.build_command }}
      env:
        appleId: ${{ secrets.APPLE_ID }}
        appleIdPassword: ${{ secrets.APPLE_ID_PASSWORD }}
        teamId: ${{ secrets.TEAM_ID }}
        identity: ${{ secrets.IDENTITY }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-build
        path: |
          out/make/**/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: build-artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.new_version }}
        name: Release ${{ needs.prepare-release.outputs.new_version }}
        body: ${{ inputs.release_notes }}
        files: build-artifacts/**/*
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.new_version, 'beta') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
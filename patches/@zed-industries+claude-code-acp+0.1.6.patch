diff --git a/node_modules/@zed-industries/claude-code-acp/dist/acp-agent.js b/node_modules/@zed-industries/claude-code-acp/dist/acp-agent.js
index 9b3ab97..2161a30 100644
--- a/node_modules/@zed-industries/claude-code-acp/dist/acp-agent.js
+++ b/node_modules/@zed-industries/claude-code-acp/dist/acp-agent.js
@@ -6,11 +6,12 @@ import { createMcpServer } from "./mcp-server.js";
 import { toolInfoFromToolUse, planEntries, toolUpdateFromToolResult, } from "./tools.js";
 // Implement the ACP Agent interface
 export class ClaudeAcpAgent {
-    constructor(client) {
+    constructor(client, claudePath) {
         this.sessions = {};
         this.client = client;
         this.toolUseCache = {};
         this.fileContentCache = {};
+        this.claudePath = claudePath;
     }
     async initialize(request) {
         this.clientCapabilities = request.clientCapabilities;
@@ -59,12 +60,34 @@ export class ClaudeAcpAgent {
                 "x-acp-proxy-session-id": sessionId,
             },
         };
+        // 使用传入的 Claude 路径，或动态检测
+        let claudePath = this.claudePath;
+        if (!claudePath) {
+            // 如果没有传入路径，则动态检测（跨平台）
+            const { execSync } = await import('node:child_process');
+            claudePath = "claude";
+            try {
+                const isWindows = process.platform === 'win32';
+                const command = isWindows ? 'where claude' : 'which claude';
+                claudePath = execSync(command, { encoding: 'utf-8' }).trim();
+                // Windows 的 where 命令可能返回多行，取第一行
+                if (isWindows && claudePath.includes('\n')) {
+                    claudePath = claudePath.split('\n')[0].trim();
+                }
+                console.error('Auto-detected claude at:', claudePath);
+            } catch (error) {
+                console.warn('Could not find claude via platform command, using default:', claudePath);
+            }
+        } else {
+            console.error('Using provided claude path:', claudePath);
+        }
         let options = {
             cwd: params.cwd,
             mcpServers,
             disallowedTools: [],
             permissionPromptToolName: "mcp__acp__permission",
             stderr: (err) => console.error(err),
+            pathToClaudeCodeExecutable: claudePath,
         };
         if (this.clientCapabilities?.fs?.readTextFile) {
             options.allowedTools = ["mcp__acp__read"];
@@ -327,6 +350,6 @@ export function toAcpNotifications(message, sessionId, toolUseCache, fileContent
     }
     return output;
 }
-export function runAcp() {
-    new AgentSideConnection((client) => new ClaudeAcpAgent(client), nodeToWebWritable(process.stdout), nodeToWebReadable(process.stdin));
+export function runAcp(claudePath) {
+    new AgentSideConnection((client) => new ClaudeAcpAgent(client, claudePath), nodeToWebWritable(process.stdout), nodeToWebReadable(process.stdin));
 }
diff --git a/node_modules/@zed-industries/claude-code-acp/dist/index.js b/node_modules/@zed-industries/claude-code-acp/dist/index.js
index db95f28..205d559 100755
--- a/node_modules/@zed-industries/claude-code-acp/dist/index.js
+++ b/node_modules/@zed-industries/claude-code-acp/dist/index.js
@@ -1,5 +1,16 @@
 #!/usr/bin/env node
+// stdout is used to send messages to the client
+// we redirect everything else to stderr to make sure it doesn't interfere with ACP
+console.log = console.error;
+console.info = console.error;
+console.warn = console.error;
+console.debug = console.error;
 import { runAcp as runAcp } from "./acp-agent.js";
-runAcp();
+// Parse command line arguments for Claude path
+const claudePathIndex = process.argv.indexOf('--claude-path');
+const claudePath = claudePathIndex !== -1 && claudePathIndex + 1 < process.argv.length
+    ? process.argv[claudePathIndex + 1]
+    : undefined;
+runAcp(claudePath);
 // Keep process alive
 process.stdin.resume();

diff --git a/node_modules/@zed-industries/claude-code-acp/src/acp-agent.ts b/node_modules/@zed-industries/claude-code-acp/src/acp-agent.ts
index 44f6eba..32601b2 100644
--- a/node_modules/@zed-industries/claude-code-acp/src/acp-agent.ts
+++ b/node_modules/@zed-industries/claude-code-acp/src/acp-agent.ts
@@ -62,12 +62,14 @@ export class ClaudeAcpAgent implements Agent {
   toolUseCache: { [key: string]: any };
   fileContentCache: { [key: string]: any };
   clientCapabilities?: ClientCapabilities;
+  claudePath?: string;
 
-  constructor(client: Client) {
+  constructor(client: Client, claudePath?: string) {
     this.sessions = {};
     this.client = client;
     this.toolUseCache = {};
     this.fileContentCache = {};
+    this.claudePath = claudePath;
   }
   async initialize(request: InitializeRequest): Promise<InitializeResponse> {
     this.clientCapabilities = request.clientCapabilities;
@@ -123,12 +125,38 @@ export class ClaudeAcpAgent implements Agent {
       },
     };
 
+    // 使用传入的 Claude 路径，或动态检测
+    let claudePath = this.claudePath;
+    
+    if (!claudePath) {
+      // 如果没有传入路径，则动态检测（跨平台）
+      const { execSync } = await import('node:child_process');
+      claudePath = "claude";
+      try {
+        const isWindows = process.platform === 'win32';
+        const command = isWindows ? 'where claude' : 'which claude';
+        claudePath = execSync(command, { encoding: 'utf-8' }).trim();
+        
+        // Windows 的 where 命令可能返回多行，取第一行
+        if (isWindows && claudePath.includes('\n')) {
+          claudePath = claudePath.split('\n')[0].trim();
+        }
+        
+        console.error('Auto-detected claude at:', claudePath);
+      } catch (error) {
+        console.warn('Could not find claude via platform command, using default:', claudePath);
+      }
+    } else {
+      console.error('Using provided claude path:', claudePath);
+    }
+
     let options: Options = {
       cwd: params.cwd,
       mcpServers,
       disallowedTools: [],
       permissionPromptToolName: "mcp__acp__permission",
       stderr: (err) => console.error(err),
+      pathToClaudeCodeExecutable: claudePath,
     };
     if (this.clientCapabilities?.fs?.readTextFile) {
       options.allowedTools = ["mcp__acp__read"];
@@ -426,9 +454,9 @@ export function toAcpNotifications(
   return output;
 }
 
-export function runAcp() {
+export function runAcp(claudePath?: string) {
   new AgentSideConnection(
-    (client) => new ClaudeAcpAgent(client),
+    (client) => new ClaudeAcpAgent(client, claudePath),
     nodeToWebWritable(process.stdout),
     nodeToWebReadable(process.stdin),
   );
diff --git a/node_modules/@zed-industries/claude-code-acp/src/index.ts b/node_modules/@zed-industries/claude-code-acp/src/index.ts
index 9e4083b..ccee179 100644
--- a/node_modules/@zed-industries/claude-code-acp/src/index.ts
+++ b/node_modules/@zed-industries/claude-code-acp/src/index.ts
@@ -1,7 +1,14 @@
 #!/usr/bin/env node
 
 import { runAcp as runAcp } from "./acp-agent.js";
-runAcp();
+
+// Parse command line arguments for Claude path
+const claudePathIndex = process.argv.indexOf('--claude-path');
+const claudePath = claudePathIndex !== -1 && claudePathIndex + 1 < process.argv.length 
+  ? process.argv[claudePathIndex + 1] 
+  : undefined;
+
+runAcp(claudePath);
 
 // Keep process alive
 process.stdin.resume();
